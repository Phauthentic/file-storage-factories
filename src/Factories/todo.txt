    public function mapNames() {
        switch ($config['adapter'] ?? 'local') {

            case 'azure':
                if (!class_exists(AzureAdapter::class)) {
                    throw PackageRequiredException::fromAdapterAndPackageNames('azure', 'league/flysystem-azure');
                }

                $endpoint = sprintf(
                    'DefaultEndpointsProtocol=https;AccountName=%s;AccountKey=%s',
                    $config['account-name'] ?? '',
                    $config['api-key'] ?? ''
                );
                $blobRestProxy = ServicesBuilder::getInstance()->createBlobService($endpoint);

                return new AzureAdapter($blobRestProxy, 'my-container');

            case 's3':
                if (!class_exists(AwsS3Adapter::class)) {
                    throw PackageRequiredException::fromAdapterAndPackageNames('s3', 'league/flysystem-aws-s3-v3');
                }

                $config['client'] = S3Client::factory($config);

                return $this->instantiator->instantiate(AwsS3Adapter::class, $config);

            case 'copy':
                if (!class_exists(CopyAdapter::class)) {
                    throw PackageRequiredException::fromAdapterAndPackageNames('copy', 'league/flysystem-copy');
                }

                $config['client'] = $this->instantiator->instantiate(CopyAPI::class, $config);

                return $this->instantiator->instantiate(CopyAdapter::class, $config);

            case 'dropbox':
                if (!class_exists(DropboxAdapter::class)) {
                    throw PackageRequiredException::fromAdapterAndPackageNames('dropbox', 'spatie/flysystem-dropbox');
                }

                $config['client'] = $this->instantiator->instantiate(DropboxClient::class, $config);

                return $this->instantiator->instantiate(DropboxAdapter::class, $config);

            case 'ftp':
                return $this->instantiator->instantiate(FtpAdapter::class, $config);

            case 'rackspace':
                if (!class_exists(RackspaceAdapter::class)) {
                    throw PackageRequiredException::fromAdapterAndPackageNames('rackspace', 'league/flysystem-rackspace');
                }

                $config['client'] = $this->instantiator->instantiate(OpenStack::class, array_merge([
                    'url' => Rackspace::UK_IDENTITY_ENDPOINT,
                ], $config));

                $config['container]'] = $this->instantiator
                     ->instantiate(ObjectStoreService::class, $config)
                     ->getContainer($config['container'] ?? '');

                return $this->instantiator->instantiate(RackspaceAdapter::class, $config);

            case 'replicate':
                if (!class_exists(ReplicateAdapter::class)) {
                    throw PackageRequiredException::fromAdapterAndPackageNames('replicate', 'league/flysystem-replicate-adapter');
                }

                $source = $this->create($config['source']);
                $replica = $this->create($config['replica']);

                return new League\Flysystem\Replicate\ReplicateAdapter($source, $replica);

            case 'phpcr':
                if (!class_exists(PhpcrAdapter::class)) {
                    throw PackageRequiredException::fromAdapterAndPackageNames('phpcr', 'league/flysystem-phpcr');
                }

                // Not implemented yet
                throw AdapterNotSupportedException::fromName('phpcr');

            default:
                throw AdapterNotSupportedException::fromName($config['adapter']);
        }
